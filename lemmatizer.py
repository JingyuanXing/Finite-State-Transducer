
from fststr import fststr
import pywrapfst as fst
import os

path = 'FST'

class Lemmatizer():
    
    ### read one input file
    def read_input_file(self, filename):
        if filename.endswith('.txt'):
            with open(filename, "r") as f:
                return f.read()

    def __init__(self):
        ### read content of all files in the 'FST' folder
        ### union all the FST
        st = fststr.symbols_table_from_alphabet(fststr.EN_SYMB)
        for file in os.listdir(path):
            fst_file = self.read_input_file('FST/'+file)
            compiler = fst.Compiler(isymbols=st, osymbols=st, keep_isymbols=True, keep_osymbols=True)
            print(fst_file, file=compiler)
            self.myFST = compiler.compile()
            fststr.expand_other_symbols(self.myFST)

    # build a FST works for just in_vocab_words in section 2.1, based on the dictionary file
    def buildInVocabFST(self): 
        # read dictionary file
        dict_file = open('in_vocab_dictionary_verbs.txt', 'r')
        # read each line of the file
        dict_lines = dict_file.readlines()
        for line in dict_lines:
            # make each line into a list of three 
            line = line.strip()
            line = line.rstrip(',')
            lineList = line.split(',')
            print(lineList)
            # now build and update FST base on each line

    def lemmatize(self, input_str):
        # input ex. giving<#>
        # output ex. give+Known or give+Guess
        ##########################################

        # myFST should eventually consist of: 
        #   txt myFSTs for out_vocab_words in section 2.2 and 2.3,
        #   FST generated by buildInVocabFST for section 2.1,
        #   union them together
        return fststr.apply(input_str, self.myFST) 

    def delemmatize(self, input_lemma):
        # input ex. give+Guess
        # output ex. a set of ”give”, ”giving”, ”gived”, ”gives”, ”giveing”, ”giveen”, and ”giveed”
        ##########################################

        return


l = Lemmatizer()
l.buildInVocabFST()






